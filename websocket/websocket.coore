referera "websocket/std.coore"

refereracore "websocket/websocket.core"
	def ws_send(send_buff = "")  °256
	klar
meep



°Task client_receive(char_p msg) {
°	#> printf("client wrote : %s\n", msg); <#
°}


struktur server
	endTime = 1000
	sendBuff = ""
	sendTime = 1000
	currentTime = 0

	°need begär send
	hel compileJson()
		temp1 = ext§cat("{" sendBuff)
		temp2 = ext§cat(sendBuff "}")
		sendBuff = temp2
		ext§free(temp1)
		återvänd 1
	klar

	°need begär send
	hel addJson(key = "" value = "")
		temp1 = ""
		om ext§isEqual(0 ext§strlen(sendBuff))
			temp1 = ext§cat("\"" key)
		annars
			temp1 = ext§cat(",\"" key)
		klar

		temp2 = ext§cat(temp1 "\":\"")
		temp3 = ext§cat(temp2 value)

		temp4 = ""
		om ext§isEqual(0 ext§strlen(sendBuff))
			temp4 = ext§cat(temp3  "\"")
		annars
			temp4 = ext§cat(temp3 "\",")
		klar

		ext§free(temp1)
		ext§free(temp2)
		ext§free(temp3)
		temp = ext§cat(sendBuff temp4)
		ext§free(sendBuff)
		sendBuff = temp
		ext§free(temp4)
		återvänd 1
	klar

	def sendData()
		begär send
			timeString = ext§malloc(8*ext§ilen(currentTime/1000))
			ext§itoa(currentTime/1000 timeString)
			addJson("time" timeString)
			compileJson()
			ext§ws_send(sendBuff)
			currentTime = sendTime + currentTime

			ext§free(send_buff)
		klar
		async efter 4 sendData()
	klar


	hel addJsonLocked(key = "" value = "")
		begär send
			addJson(key value)
		klar
		återvänd 1
	klar

	hel setSendTime(time = 0)
		sendTime = time
		återvänd 1
	klar

	hel reset1()
		endTime = 1000
		ext§free(sendBuff)
		sendTime = 1000
		currentTime = 0
	klar
meep

struktur client
	def recive(msg = "")
		om ext§isEqual(ext§strcmp(msg "vinner") 0)
			server§reset1()
		annars
		klar
	klar
meep

°Task periodic() {
°	#>
°	static char send_buff[256];
°	static int i = 0;
°	sprintf(send_buff, "Counter %d", i++);
°	<#
°	sync ws_send(send_buff);
°	async after 2s periodic();
°}




reset
	°async periodic()
	°sync idle_websocket()
klar




